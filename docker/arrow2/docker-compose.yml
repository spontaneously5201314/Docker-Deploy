# 用来作为arrow2测试环境项目的docker一键安装所有中间件的docker-compose脚本
version: '3'
services:
  mysql5:
    image: mysql:5.7
    container_name: mysql5.7
    volumes:
      - /data/docker/mysql/version5/data:/var/lib/mysql
      - /data/docker/mysql/version5/conf:/etc/mysql/conf.d
    restart: unless-stopped
    ports:
      - "3308:3306"
    expose:
      - "3308"
    environment:
      MYSQL_ROOT_PASSWORD: arrow2
      MYSQL_DATABASE: arrow2
      MYSQL_USER: arrow2
      MYSQL_USER: arrow2
      MYSQL_PASSWORD: arrow2
# MySQL5版本分配权限：
# GRANT ALL PRIVILEGES ON *.* TO `root`@`localhost` IDENTIFIED BY `arrow2` WITH GRANT OPTION;
# GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'arrow2' WITH GRANT OPTION;
# FLUSH PRIVILEGES;

#先创建一个用户
#create user 'test'@'%' identified by '123123';
#再进行授权
#grant all privileges on *.* to 'root'@'%' with grant option;
#grant all privileges on *.* to 'root'@'localhost' with grant option;

  redis6379:
    image: redis:4
    container_name: redis_6379
    restart: unless-stopped
    ports:
      - "6379:6379"
    expose:
      - "6379"
    environment:
      appendonly: "yes"
    volumes:
      - /data/docker/redis/6379:/data
  redis6380:
    image: redis:4
    container_name: redis_6380
    restart: unless-stopped
    ports:
      - "6380:6379"
    expose:
      - "6380"
    environment:
      appendonly: "yes"
    volumes:
      - /data/docker/redis/6380:/data
  redis6381:
    image: redis:4
    container_name: redis_6381
    restart: unless-stopped
    ports:
      - "6381:6379"
    expose:
      - "6381"
    environment:
      appendonly: "yes"
    volumes:
      - /data/docker/redis/6381:/data
  redis6382:
    image: redis:4
    container_name: redis_6382
    restart: unless-stopped
    ports:
      - "6382:6379"
    expose:
      - "6382"
    environment:
      appendonly: "yes"
    volumes:
      - /data/docker/redis/6382:/data
  redis6383:
    image: redis:4
    container_name: redis_6383
    restart: unless-stopped
    ports:
      - "6383:6379"
    expose:
      - "6383"
    environment:
      appendonly: "yes"
    volumes:
      - /data/docker/redis/6383:/data
  redis6384:
    image: redis:4
    container_name: redis_6384
    restart: unless-stopped
    ports:
      - "6384:6379"
    expose:
      - "6384"
    environment:
      appendonly: "yes"
    volumes:
      - /data/docker/redis/6384:/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15671:15671"
      - "15672:15672"
    expose:
      - "5672"
      - "15671"
      - "15672"
    volumes:
      - /data/docker/rabbitmq:/var/lib/rabbitmq
#      - /etc/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf

  cassandra-1:
    image: cassandra:3.11
    restart: unless-stopped
    container_name: cassandra-1
    environment:
          - CASSANDRA_BROADCAST_ADDRESS=cassandra-1
    ports:
      - "7000:7000"
      - "7001:7001"
      - "7199:7199"
      - "9042:9042"
      - "9160:9160"
    volumes:
      - /data/docker/cassandra/cassandra-1:/var/lib/cassandra
#  cassandra-2:
#    image: cassandra:3.11
#    restart: unless-stopped
#    container_name: cassandra-2
#    environment:
#          - CASSANDRA_BROADCAST_ADDRESS=cassandra-2
#    ports:
#      - "7000:7000"
#      - "7001:7001"
#      - "7199:7199"
#      - "9042:9042"
#      - "9160:9160"
#    volumes:
#      - "/opt/docker/cassandra-1:/var/lib/cassandra"
#  cassandra-3:
#    image: cassandra:3.11
#    restart: unless-stopped
#    container_name: cassandra-3
#    environment:
#          - CASSANDRA_BROADCAST_ADDRESS=cassandra-3
#    ports:
#      - "7000:7000"
#      - "7001:7001"
#      - "7199:7199"
#      - "9042:9042"
#      - "9160:9160"
#    volumes:
#      - "/opt/docker/cassandra-1:/var/lib/cassandra"

  nginx:
    image: nginx
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
#    volumes:
#      - /etc/nginx:/etc/nginx
#      - /usr/share/nginx/html:/usr/share/nginx/html
# 等到在宿主机上安装过nginx之后就有了，到时再做映射

  elk:
    image: sebp/elk
    container_name: elk
    restart: unless-stopped
    ports:
      - "5601:5601"
      - "9200:9200"
      - "5044:5044"

  cerebro:
    image: yannart/cerebro
    container_name: cerebro
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /data/docker/cerebro/logs:/opt/cerebro/logs
#      - /data/docker/cerebro/conf:/opt/cerebro/conf

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: unless-stopped
    ports:
      - "8088:8080"
      - "50000:50000"
    volumes:
# 在使用docker部署jenkins的时候，一定要注意容器中挂载的卷在宿主机中一定要有读写权限，不然在容器里面配置的各种maven的本地仓库位置，在打包的时候都不能写入，
# 会报各种莫名其妙的不能解析pom.xml文件的错误，会误导解决
      - /data/docker/jenkins:/var/jenkins_home
      - /data/docker/maven/repo:/var/jenkins_home/maven/repo
      - /data/maven/apache-maven-3.5.4:/data/maven
      - /data/maven/repo:/data/maven/repo
      - /usr/java/jdk1.8.0_181-amd64:/usr/java/jdk1.8
      - /data/maven/repo:/var/jenkins_home/.m2

#  maven:
#    image: maven:3.5.4-jdk-8
#    container_name: maven
#    volumes:
#      - /data/docker/maven/repo:/root/.m2

  sonar:
    image: sonarqube:7.1
    container_name: sonar
    restart: unless-stopped
    ports:
      - "9091:9000"
      - "9092:9092"
    networks:
      - sonarnet
    environment:
      SONARQUBE_JDBC_USERNAME: sonar
      SONARQUBE_JDBC_PASSWORD: sonar
      SONARQUBE_JDBC_URL: jdbc:postgresql://sonardb:5432/sonar
    volumes:
      - /data/docker/sonar/data:/opt/sonarqube/data
      - /data/docker/sonar/conf:/opt/sonarqube/conf
      - /data/docker/sonar/extensions:/opt/sonarqube/extensions
      - /data/docker/sonar/lib/bundled-plugins:/opt/sonarqube/lib/bundled-plugins

# 在maven项目中使用的方法mvn sonar:sonar -Dsonar.host.url=http://10.60.82.158:9091 -Dsonar.login=cd448e763381bf829b8d0b7c27eaf7c4d1b1c5b5
# 账号admin,密码admin

  sonardb:
    image: postgres:10
    restart: unless-stopped
    networks:
      - sonarnet
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
    volumes:
      - /data/docker/postgresql:/var/lib/postgresql
      # This needs explicit mapping due to https://github.com/docker-library/postgres/blob/4e48e3228a30763913ece952c611e5e9b95c8759/Dockerfile.template#L52
      - /data/docker/postgresql/data:/var/lib/postgresql/data

  gitlab-runner:
    image: gitlab/gitlab-runner:latest
    container_name: gitlab-runner-docker
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /srv/gitlab-runner/config:/etc/gitlab-runner
    extra_hosts:
      - "gitlab.local:10.60.80.94"

networks:
  sonarnet:
    driver: bridge